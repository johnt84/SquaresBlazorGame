@page "/squaresgame"

@using SquaresBlazorGame.Data;
@using SquaresBlazorGame.Models;

<style type="text/css">
    .row {
        display: flex;
        margin-left: 15px;
    }

    .horizContainer {
        height: 4px;
        width: 90px;
        border: 3px;
    }

    .vertContainer {
        height: 90px;
        width: 4px;
        border: 2px;
    }

    .dot {
        height: 4px;
        width: 4px;
        background-color: black;
    }

    .box {
        height: 90px;
        width: 90px;
    }

    div {
        display: block;
    }
</style>

<h1 style="padding-bottom: 17px;">Squares Game</h1>

<div id="game-board">
    @if (gameEngine.GameBoard != null)
    {
        <div style="font-size: 18px; width: 103px; width: 110px; margin-bottom: 18px;">
            <button id="btnNewGame" class="btnNewGame" @onclick="NewGame">New Game</button>
        </div>

        <div style="font-size:28px; margin-bottom:10px;">
            <span>@gameEngine.GameStatusForDisplay</span>
        </div>

        @if (gameEngine.GameBoard.GameStatus == Enums.GameStatus.Game_Over)
        {
            <div style="font-size: 28px; margin-bottom:10px;">
                <span>@gameEngine.GameResultForDisplay</span>
            </div>
        }

        <div style="font-size: 26px;margin-bottom:25px;">
            <span style="color:white; background-color:@gameEngine.Player1ColourForDisplay">@gameEngine.Player1NameForDisplay</span><span style="padding-left: 10px; padding-right:10px">@gameEngine.GameBoard.Player1BoxesFilled</span><span>-</span>
            <span style="padding-right:10px; width: 76px;">@gameEngine.GameBoard.Player2BoxesFilled</span><span style="color: white; background-color: @gameEngine.Player2ColourForDisplay">@gameEngine.Player2NameForDisplay</span>
        </div>

        @for (int rowIndex = 0; rowIndex < gameEngine.GameBoard.Game.NumberOfRows; rowIndex++) //Taken from https://codepen.io/dbuzinski/pen/JZrZbJ
        {
            int x = rowIndex;
            <div class="row">
                @for (int colIndex = 0; colIndex < gameEngine.GameBoard.Game.NumberOfColumns; colIndex++)
                {
                    int y = colIndex;

                    <div class="dot" id="@DotID(x, y)"></div>
                    @if (colIndex < gameEngine.GameBoard.Game.NumberOfColumns - 1)
                    {
                        <div class="horizContainer" data-coord="@gameEngine.HorizontalLineDirection,@x,@y" style="background-color: @gameEngine.GameBoard.Lines[gameEngine.HorizontalLineDirection, x, y].GameColour" @onclick="@(() => LineClicked(gameEngine.GameBoard.Lines[gameEngine.HorizontalLineDirection, x, y]))" @onmouseover="@(() => LineMouseAction(gameEngine.GameBoard.Lines[gameEngine.HorizontalLineDirection, x, y], true))" @onmouseout="@(() => LineMouseAction(gameEngine.GameBoard.Lines[gameEngine.HorizontalLineDirection, x, y], false))"></div>
                    }
                }
            </div>
            @if (rowIndex < gameEngine.GameBoard.Game.NumberOfRows - 1)
            {
                <div class="row">
                    @for (int colIndex = 0; colIndex < gameEngine.GameBoard.Game.NumberOfColumns; colIndex++)
                    {
                        int y = colIndex;

                        <div class="vertContainer" data-coord="@gameEngine.VerticalLineDirection,@x,@y" style="background-color: @gameEngine.GameBoard.Lines[gameEngine.VerticalLineDirection, x, y].GameColour" @onclick="@(() => LineClicked(gameEngine.GameBoard.Lines[gameEngine.VerticalLineDirection, x, y]))" @onmouseover="@(() => LineMouseAction(gameEngine.GameBoard.Lines[gameEngine.VerticalLineDirection, x, y], true))" @onmouseout="@(() => LineMouseAction(gameEngine.GameBoard.Lines[gameEngine.VerticalLineDirection, x, y], false))"></div>
                        @if (colIndex < gameEngine.GameBoard.Game.NumberOfColumns - 1)
                        {
                            <div class="box" id="@BoxID(gameEngine.GetBoxNumber(x, y), x, y)" style="background-color: @gameEngine.GetBoxColour(x, y)"></div>
                        }
                    }
                </div>
            }
        }
    }
</div>

@code {

    private GameEngine gameEngine;

    private string DotID(int rowIndex, int colIndex) => $"{Enums.Shape.Dot}{rowIndex},{colIndex}";

    private string BoxID(int boxNumber, int rowIndex, int colIndex) => $"{Enums.Shape.Box}{boxNumber},{rowIndex},{colIndex}";

    protected override void OnInitialized()
    {
        gameEngine = new GameEngine();
    }

    private async Task LineClicked(Line line)
    {
        await gameEngine.DrawLine(line);
    }

    private void LineMouseAction(Line line, bool mouseOver)
    {
        if (gameEngine.GameBoard == null || gameEngine.GameBoard.GameStatus == Enums.GameStatus.Game_Over)
        {
            return;
        }

        if (line.LineClicked)
        {
            return;
        }

        line.GameColour = mouseOver ? Enums.GameColour.Grey : Enums.GameColour.White;
    }

    private void NewGame()
    {
        gameEngine.ResetGame();
    }
}
