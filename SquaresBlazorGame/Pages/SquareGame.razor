@page "/squaresgame"

@using SquaresBlazorGame.Data;
@using SquaresBlazorGame.Models;

<style type="text/css">
    td {
        width: 175px;
        height: 175px;
        border-style: dotted;
        font-size: x-large;
        text-align: center;
    }

    .horizContainer {
        height: 4px;
        width: 25px;
        border: 3px;
    }

    .vertContainer {
        height: 25px;
        width: 4px;
        border: 2px;
    }

    .dot {
        height: 4px;
        width: 4px;
        background-color: black;
    }

    .box {
        height: 25px;
        width: 25px;
    }

    div {
        display: block;
    }
</style>

<h3>Squares Game</h3>

<div id="game-board">
    @if (gameBoard != null)
    {
        <button id="btnNewGame" class="btnNewGame" @onclick="NewGame">New Game</button><br /><br />

        foreach (var row in gameBoard.Rows)
        {
            <div class="row">
                @foreach (var box in row.Boxes)
                {
                    <div class="dot" id="@DotID(box.RowNumber,box.ColNumber)"></div>
                    <div class="horizContainer" data-coord="HORIZONTAL_NO,@box.RowNumber,@box.ColNumber" style="background-color: @box.TopLine.GameColour;" @onclick="@(() => LineClicked(box.TopLine))" @onmouseover="@(()=> LineMouseAction(box.TopLine, true))" @onmouseout="@(()=> LineMouseAction(box.TopLine, false))"></div>

                    <div class="vertContainer" data-coord="VERTICAL_NO,@box.RowNumber,@box.ColNumber" style="background-color: @box.LeftLine.GameColour;" @onclick="@(() => LineClicked(box.LeftLine))" @onmouseover="@(()=> LineMouseAction(box.LeftLine, true))" @onmouseout="@(()=> LineMouseAction(box.LeftLine, false))"></div>
                    <div class="box" id="@BoxID(box.RowNumber,@box.ColNumber)" style="background-color: @box.LeftLine.GameColour;"></div>

                    @*<div class="dot" id="@DotID(row.RowNumber,box.BoxNumber)"></div>
                    <div class="horizContainer" data-coord="HORIZONTAL_NO,@box.RowNumber,@box.ColNumber" style="background-color: @box.BottomLine.GameColour;" @onclick="@(() => LineClicked(box.BottomLine))" @onmouseover="@(()=> LineMouseOver(box.BottomLine))" @onmouseout="@(()=> LineMouseOut(box.BottomLine))"></div>

                    <div class="vertContainer" data-coord="VERTICAL_NO,@box.RowNumber,@box.ColNumber" style="background-color: @box.RightLine.GameColour;" @onclick="@(() => LineClicked(box.RightLine))" @onmouseover="@(()=> LineMouseOver(box.RightLine))" @onmouseout="@(()=> LineMouseOut(box.RightLine))"></div>
                    <div class="box" id="@BoxID(box.RowNumber,box.ColNumber)" style="background-color: @BoxStyles[box.RowNumber, box.ColNumber];"></div>*@
                }
            </div>
        }
    }
</div>

@code {

    private GameBoard gameBoard;

    private string DotID(int rowIndex, int colIndex) => $"{Enums.Shape.Dot}{rowIndex},{colIndex}";

    private string BoxID(int rowIndex, int colIndex) => $"{Enums.Shape.Box}{rowIndex},{colIndex}";

    protected override void OnInitialized()
    {
        gameBoard = new GameBoard();
    }

    private void LineClicked(Line line)
    {
        gameBoard.DrawLine(line);
    }

    private void LineMouseAction(Line line, bool mouseOver)
    {
        if (gameBoard == null || gameBoard.GameComplete)
        {
            return;
        }

        if (line.LineClicked)
        {
            return;
        }

        line.GameColour = mouseOver ? Enums.GameColour.Grey : Enums.GameColour.White;
    }

    private void NewGame()
    {
        gameBoard.ResetGame();
    }
}
